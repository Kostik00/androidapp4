<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/ru/iskaskad/iskaskadapp/IsKaskadAPPVM.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/ru/iskaskad/iskaskadapp/IsKaskadAPPVM.kt" />
              <option name="originalContent" value="package ru.iskaskad.iskaskadapp&#10;&#10;import android.app.AlertDialog&#10;import android.app.Application&#10;import android.app.Dialog&#10;import android.content.SharedPreferences&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.fragment.app.DialogFragment&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.preference.PreferenceManager&#10;import kotlinx.coroutines.*&#10;import org.json.JSONException&#10;import org.json.JSONObject&#10;import ru.iskaskad.iskaskadapp.dto.*&#10;import java.net.URL&#10;import java.util.*&#10;&#10;&#10;class IsKaskadAPPVM(application: Application) : AndroidViewModel(application) {&#10;&#10;    class MyDialogFragment : DialogFragment() {&#10;&#10;        override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {&#10;            return activity?.let {&#10;                val builder = AlertDialog.Builder(it)&#10;                builder.setTitle(&quot;Важное сообщение!&quot;)&#10;                    .setMessage(&quot;Покормите кота!&quot;)&#10;                    //.setIcon(R.drawable.hungrycat)&#10;                    .setPositiveButton(&quot;ОК, иду на кухню&quot;) {&#10;                            dialog, id -&gt;  dialog.cancel()&#10;                    }&#10;                builder.create()&#10;            } ?: throw IllegalStateException(&quot;Activity cannot be null&quot;)&#10;        }&#10;    }&#10;&#10;&#10;&#10;    val LogTAG = &quot;iskaskadappViewModel&quot;&#10;&#10;    init {&#10;        ISKaskadAPP.sendLogMessage(LogTAG, &quot;Init&quot;)&#10;    }&#10;&#10;    var RunProgress: MutableLiveData&lt;Int&gt; = MutableLiveData(-1)&#10;    var ErrorText: MutableLiveData&lt;String&gt; = MutableLiveData(&quot;&quot;)&#10;    var ErrorMessage:MutableLiveData&lt;String&gt; = MutableLiveData(&quot;&quot;)&#10;&#10;    var AdvSearchChecked: Boolean = false&#10;&#10;//    private val myPreferences = PreferenceManager.getDefaultSharedPreferences(getApplication())&#10;&#10;    var SearchStr: String = &quot;&quot;&#10;&#10;    var NeedStatistics: Boolean = false&#10;&#10;    private var data_PaspPlace: MutableLiveData&lt;PlaceInfo&gt; = MutableLiveData()&#10;    fun getPaspPlace() = data_PaspPlace&#10;&#10;    private var PaspPlaceJob: Job = Job()&#10;    private var PaspInfoJob: Job = Job()&#10;    private var MTaskJob: Job = Job()&#10;    private var UpdateMTaskJob: Job = Job()&#10;    private var PaspListJob: Job = Job()&#10;    private var SkladJob:Job= Job()&#10;    private var SkladTaskJob:Job=Job()&#10;    private var SkladGrZapJob:Job=Job()&#10;    private var SkladGrZapInfoJob:Job=Job()&#10;    private var SelectSubjJob:Job= Job()&#10;    private var SkladRunGrZapJob:Job= Job()&#10;&#10;&#10;    fun SkladRunGrZap(RunStr: String) {&#10;&#10;        SkladRunGrZapJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_RUN_GRZAP, RunStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    try {&#10;                        val V = getGrZapList().value&#10;                         V?.let { if (it.count() &gt; 0)&#10;                                      loadGrZapList(it[0].SearchStr)&#10;                                  else&#10;                                      loadGrZapList(&quot;&quot;)&#10;                                }&#10;&#10;&#10;                        val JsonData = JSONObject(Result)&#10;                        val Items = JsonData.getJSONArray(&quot;resultinfo&quot;)&#10;                        val frinfo = Items.getJSONObject(0)&#10;                        val ErrText = frinfo.getString(&quot;ErrorMessage&quot;)&#10;&#10;                        if (frinfo.getString(&quot;RESULT&quot;) == &quot;SUCCESS&quot;)&#10;                            Toast.makeText(getApplication(), ErrText, Toast.LENGTH_LONG).show()&#10;                        else {&#10;                            ErrorMessage.postValue(ErrText)&#10;&#10;                        }&#10;&#10;                    } catch (e: JSONException) {&#10;                        e.printStackTrace()&#10;                        showError(&quot;Ошибка данных при отправке запроса на создание накладных: $Result&quot;)&#10;                    }&#10;&#10;&#10;&#10;                }&#10;            }, SkladRunGrZapJob&#10;        )&#10;    }&#10;&#10;&#10;&#10;&#10;&#10;    fun clearGrZapInfo() {&#10;         getGrZapInfo().postValue(null)&#10;    }&#10;    fun loadGrZapInfo(SearchStr: String) {&#10;&#10;        getGrZapInfo().value?.let {&#10;            if (SearchStr== it.SearchStr) return&#10;        }&#10;&#10;        clearGrZapInfo()&#10;&#10;&#10;        SkladGrZapInfoJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_GRZAP_INFO, SearchStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseGrZapInfo(Result, SearchStr)&#10;&#10;                }&#10;            }, SkladGrZapJob&#10;        )&#10;    }&#10;    fun parseGrZapInfo(JSonStr: String, SearchStr:String) {&#10;        try {&#10;&#10;            val JsonData = JSONObject(JSonStr)&#10;            val Items = JsonData.getJSONArray(&quot;grzapinfo&quot;)&#10;            val frinfo = SkladGrZapDetailedInfo(Items.getJSONObject(0))&#10;            frinfo.SearchStr = SearchStr&#10;            getGrZapInfo().postValue(frinfo)&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (задание на запуск)&quot;)&#10;        }&#10;&#10;&#10;    }&#10;&#10;&#10;&#10;&#10;    private var data_GrZapInfo: MutableLiveData&lt;SkladGrZapDetailedInfo?&gt; = MutableLiveData()&#10;    fun getGrZapInfo() = data_GrZapInfo&#10;&#10;&#10;&#10;    fun moveItems(KeyNaclStrList:String, KeyNaclStrSostList:String, Key_Pasp_Place:String){&#10;&#10;        if ((KeyNaclStrList==&quot;&quot;) &amp;&amp; (KeyNaclStrSostList==&quot;&quot;))&#10;        {&#10;            Toast.makeText(getApplication(), &quot;Для перемещения необходимо выбрать перемещаемые позиции&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        var request = &quot;&quot;&#10;&#10;&#10;        request += &quot;&amp;Key_Pasp_Place=&quot; + ISKaskadAPP.encodeStr(Key_Pasp_Place)&#10;&#10;        if (KeyNaclStrList != &quot;&quot;)&#10;            request += &quot;&amp;KeyNaclStrList=&quot; + ISKaskadAPP.encodeStr(KeyNaclStrList)&#10;&#10;        if (KeyNaclStrSostList != &quot;&quot;)&#10;            request += &quot;&amp;KeyNaclStrSostList=&quot; + ISKaskadAPP.encodeStr(KeyNaclStrSostList)&#10;&#10;&#10;        SkladTaskJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_FRAGMENT_MOVE, request,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseSkladTask(Result)&#10;                }&#10;            }, SkladTaskJob&#10;        )&#10;&#10;    }&#10;&#10;    fun parseSkladTask(StrResult: String) {&#10;        if (StrResult==ISKaskadAPP.URL_RESULT_SUCCESS)&#10;        {&#10;            Toast.makeText(getApplication(), &quot;Перемещение произошло успешно&quot;, Toast.LENGTH_LONG).show()&#10;            loadSkladOstatokList(LastSkladSearchStr)&#10;        }&#10;        else&#10;        {&#10;            Toast.makeText(getApplication(), &quot;Ошибка перемещения: $StrResult&quot;, Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    fun updateMTask(New_Key_Pasp_Place: String, Key_Pasport: String, NewState: String) {&#10;        val URLParams =&#10;            &quot;&amp;New_Key_Pasp_Place=&quot; + New_Key_Pasp_Place + &quot;&amp;Key_Pasport=&quot; + Key_Pasport +&#10;                    &quot;&amp;NewState=&quot; + NewState&#10;&#10;        UpdateMTaskJob = runHTTPQry(0, ISKaskadAPP.URL_MTASK_SETSTATUS, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseUpdateMTask(Result)&#10;                }&#10;            }, UpdateMTaskJob&#10;        )&#10;    }&#10;&#10;    private var data_FragmentList:MutableLiveData&lt;MutableList&lt;SkladFragmentInfo&gt;&gt; = MutableLiveData()&#10;    fun getFragmentList() = data_FragmentList&#10;&#10;&#10;    private var  sklad_fragment_history: MutableLiveData&lt; ArrayList&lt;SkladFragmentHistoryInfo&gt;&gt; = MutableLiveData()&#10;    fun getSelectedFragmentHistory() = sklad_fragment_history&#10;&#10;    private var f_SelectedFragment: MutableLiveData&lt;SkladFragmentInfo?&gt; = MutableLiveData(null)&#10;    fun getSelectedFragment() = f_SelectedFragment&#10;&#10;    var SelectedFragment: SkladFragmentInfo?&#10;        get() = f_SelectedFragment.value&#10;        set(value) {&#10;            if (value != f_SelectedFragment.value) {&#10;                f_SelectedFragment.postValue(value)&#10;&#10;                value?.let {&#10;&#10;                    val  Key_Nacl_Str_Sost  = it.getParam(&quot;Key_Nacl_Str_Sost&quot;)&#10;                    val  Key_Nacl_Str       = it.getParam(&quot;Key_Nacl_Str&quot;)&#10;&#10;                    val URLParams = if ( Key_Nacl_Str_Sost.ParamIsNull)&#10;                        &quot;&amp;Key_Nacl_Str=&quot;+Key_Nacl_Str.IntVal.toString()&#10;                    else&#10;                        &quot;&amp;Key_Nacl_Str_Sost=&quot;+Key_Nacl_Str_Sost.IntVal.toString()&#10;&#10;                    loadSkladOstatokDetail(URLParams)&#10;                }&#10;&#10;            }&#10;        }&#10;&#10;&#10;&#10;    private var data_FindGrZap: MutableLiveData&lt;MutableList&lt;SkladGrZapInfo&gt;&gt; = MutableLiveData()&#10;    fun getGrZapList() = data_FindGrZap&#10;&#10;&#10;    private var data_SubjList: MutableLiveData&lt;MutableList&lt;SubjInfo&gt;&gt; = MutableLiveData()&#10;    fun getSubjList() = data_SubjList&#10;&#10;    private var data_SelectedSubjInfo: MutableLiveData&lt;SubjInfo?&gt; = MutableLiveData(null)&#10;    fun GetSelectedSubjInfo() = data_SelectedSubjInfo&#10;&#10;&#10;&#10;    private var data_FindPasp: MutableLiveData&lt;MutableList&lt;PaspInfo&gt;&gt; = MutableLiveData()&#10;    fun getPaspList() = data_FindPasp&#10;&#10;    private var data_PaspMK: MutableLiveData&lt;MutableList&lt;PaspMKInfo&gt;&gt; = MutableLiveData()&#10;    fun getPaspMK() = data_PaspMK&#10;&#10;    private var data_PaspHistory: MutableLiveData&lt;MutableList&lt;PaspHistoryRecInfo&gt;&gt; =  MutableLiveData()&#10;    fun getPaspHistory() = data_PaspHistory&#10;&#10;    private var f_SelectedPaspInfo: MutableLiveData&lt;PaspInfo?&gt; = MutableLiveData(null)&#10;    fun getSelectedPaspInfo() = f_SelectedPaspInfo&#10;&#10;&#10;    var SelectedPaspInfo: PaspInfo?&#10;        get() = f_SelectedPaspInfo.value&#10;        set(value) {&#10;            if (value != f_SelectedPaspInfo.value) {&#10;                f_SelectedPaspInfo.postValue(value)&#10;                data_PaspMK.value = ArrayList&lt;PaspMKInfo&gt;()&#10;                data_PaspHistory.value = ArrayList&lt;PaspHistoryRecInfo&gt;()&#10;                loadPaspInfo(value!!.getStrParam(&quot;Key_Pasport&quot;))&#10;            }&#10;        }&#10;&#10;&#10;&#10;    private var data_mtask: MutableLiveData&lt;MutableList&lt;MTaskInfo&gt;&gt; = MutableLiveData()&#10;    fun getMTaskList() = data_mtask&#10;&#10;    fun loadGrZapList(SearchStr: String) {&#10;        SkladGrZapJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_GRZAP_FIND, SearchStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseGrZapList(Result, SearchStr)&#10;                }&#10;            }, SkladGrZapJob&#10;        )&#10;    }&#10;&#10;&#10;     fun loadPaspList(SearchStr: String) {&#10;        PaspListJob = runHTTPQry(0, ISKaskadAPP.URL_PASPINFO_FINDPASP, SearchStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parsePaspList(Result)&#10;                }&#10;            }, PaspListJob&#10;        )&#10;    }&#10;&#10;&#10;&#10;    fun loadPaspPlaceInfo(Key_Pasp_Place: String) {&#10;        val URLParams = &quot;&amp;Key_Pasp_Place=$Key_Pasp_Place&quot;&#10;&#10;        PaspPlaceJob = runHTTPQry(0, ISKaskadAPP.URL_PASPPLACE_GETINFO, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parsePlaceInfo(Result)&#10;                }&#10;            }, PaspPlaceJob&#10;        )&#10;    }&#10;&#10;&#10;&#10;    fun loadPaspInfo(Key_Pasport: String) {&#10;        val URLParams = &quot;&amp;Key_Pasport=$Key_Pasport&quot;&#10;&#10;        PaspInfoJob = runHTTPQry(0, ISKaskadAPP.URL_PASPINFO_GETINFO, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parsePaspInfo(Result)&#10;                }&#10;            }, PaspInfoJob&#10;        )&#10;    }&#10;&#10;    fun loadMTaskList() {&#10;        MTaskJob = runHTTPQry(0, ISKaskadAPP.URL_MTASK_GETLIST, &quot;&quot;,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseMTaskList(Result)&#10;                }&#10;            }, MTaskJob&#10;        )&#10;&#10;    }&#10;&#10;    private var LastSkladSearchStr:String=&quot;&quot;&#10;&#10;    fun loadSkladOstatokList(SearchStr: String) {&#10;        LastSkladSearchStr=SearchStr&#10;        SelectSubjJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_FRAGMENT_FIND, SearchStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseSkladOstatokList(Result)&#10;                }&#10;            }, SkladJob&#10;        )&#10;    }&#10;&#10;    fun loadSkladOstatokDetail(URLParams: String) {&#10;&#10;        SkladJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_FRAGMENT_INFO, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseSkladOstatokDetail(Result)&#10;                }&#10;            }, SkladJob&#10;        )&#10;    }&#10;&#10;    fun inventOstatok(Key_Pasp_Place:String, Key_Nacl_Str:String, Kolvo:String, Key_Nacl_Str_Sost:String, KolvoZag:String){&#10;&#10;        var URLParams  = &quot;&amp;Key_Pasp_Place=$Key_Pasp_Place&amp;Key_Nacl_Str=$Key_Nacl_Str&quot;&#10;&#10;        URLParams = if ( Key_Nacl_Str_Sost != &quot;&quot;)  {&#10;            &quot;$URLParams&amp;Key_Nacl_Str_Sost=$Key_Nacl_Str_Sost&amp;KolvoZag=${ISKaskadAPP.encodeStr(KolvoZag.replace(&quot;,&quot;,&quot;.&quot;))}&quot;&#10;        }&#10;        else  {&#10;            &quot;$URLParams&amp;Kolvo=${ISKaskadAPP.encodeStr(Kolvo.replace(&quot;,&quot;,&quot;.&quot;))}&quot;&#10;        }&#10;&#10;        SkladJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_FRAGMENT_INVENT, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    if (Result== ISKaskadAPP.URL_RESULT_SUCCESS) {&#10;                        Toast.makeText(getApplication(), &quot;Обновление данных прошло успешно&quot;, Toast.LENGTH_LONG).show()&#10;&#10;&#10;&#10;                        val URLParams1 =  if (Key_Nacl_Str_Sost==&quot;&quot;)&#10;                            &quot;&amp;Key_Nacl_Str=$Key_Nacl_Str&quot;&#10;                        else&#10;                            &quot;&amp;Key_Nacl_Str_Sost=$Key_Nacl_Str_Sost&quot;&#10;&#10;                        loadSkladOstatokDetail(URLParams1)&#10;&#10;&#10;                    }&#10;                    else&#10;                        Toast.makeText(getApplication(), &quot;Ошибка инвентаризации: $Result&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }, SkladJob&#10;        )&#10;&#10;    }&#10;&#10;&#10;    var LastSubjListSearchStr:String = &quot;&quot;&#10;&#10;    fun loadSubjList(SearchStr: String) {&#10;        if ((SearchStr!=LastSubjListSearchStr)  || (1==1))&#10;        {&#10;            LastSubjListSearchStr = SearchStr&#10;&#10;            SelectSubjJob = runHTTPQry(&#10;                0, ISKaskadAPP.URL_SUBJ_FIND, SearchStr,&#10;                object : ParseResult {&#10;                    override fun parseResult(Result: String, QryID: Int) {&#10;                        parseSubjList(Result)&#10;                    }&#10;                }, SelectSubjJob&#10;            )&#10;        }&#10;    }&#10;&#10;&#10;    fun parseSubjList(ResultStr: String) {&#10;        val SearchResult: MutableList&lt;SubjInfo&gt; = mutableListOf()&#10;        try {&#10;            val data = JSONObject(ResultStr)&#10;            val items = data.getJSONArray(&quot;subjinfo&quot;)&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = SubjInfo(item)&#10;                SearchResult.add(frinfo)&#10;            }&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (поиск группы запуска)&quot;)&#10;        }&#10;        getSubjList().postValue(SearchResult)&#10;        if (SearchResult.count()==1)&#10;            GetSelectedSubjInfo().postValue(SearchResult[0])&#10;    }&#10;&#10;&#10;&#10;&#10;    fun parsePaspInfo(JSonStr: String) {&#10;&#10;        try {&#10;&#10;            val data = JSONObject(JSonStr)&#10;&#10;            val ItemInfo = data.getJSONArray(&quot;paspinfo&quot;)&#10;            val itemData: JSONObject = ItemInfo.getJSONObject(0)&#10;&#10;            val NewPaspInfo = PaspInfo(itemData)&#10;&#10;            f_SelectedPaspInfo.value = NewPaspInfo&#10;&#10;            if (NewPaspInfo.getStrParam(&quot;Key_Pasport&quot;) == SelectedPaspInfo?.getStrParam(&quot;Key_Pasport&quot;))&#10;            if (true)&#10;            {&#10;&#10;                val NewDataArray: ArrayList&lt;PaspMKInfo&gt; = ArrayList&lt;PaspMKInfo&gt;()&#10;&#10;                val items = data.getJSONArray(&quot;paspmk&quot;)&#10;&#10;                for (i in 0 until items.length()) {&#10;                    val item: JSONObject = items.getJSONObject(i)&#10;                    val DataStr = PaspMKInfo(item)&#10;&#10;                    NewDataArray.add(DataStr)&#10;                }&#10;                getPaspMK().postValue(NewDataArray)&#10;            }&#10;&#10;            if (NewPaspInfo.getStrParam(&quot;Key_Pasport&quot;) == SelectedPaspInfo?.getStrParam(&quot;Key_Pasport&quot;))&#10;&#10;            if (true)&#10;            {&#10;&#10;                val NewDataArray: ArrayList&lt;PaspHistoryRecInfo&gt; = ArrayList&lt;PaspHistoryRecInfo&gt;()&#10;&#10;                val items = data.getJSONArray(&quot;history&quot;)&#10;&#10;                for (i in 0 until items.length()) {&#10;                    val item: JSONObject = items.getJSONObject(i)&#10;                    val DataStr = PaspHistoryRecInfo(item)&#10;&#10;                    NewDataArray.add(DataStr)&#10;                }&#10;                getPaspHistory().postValue(NewDataArray)&#10;            }&#10;&#10;&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (Детализация паспорта)&quot;)&#10;        }&#10;&#10;    }&#10;&#10;    fun parseMTaskList(JSonStr: String) {&#10;        try {&#10;&#10;            val data = JSONObject(JSonStr)&#10;&#10;            val NewDataArray: ArrayList&lt;MTaskInfo&gt; = ArrayList&lt;MTaskInfo&gt;()&#10;&#10;            val items = data.getJSONArray(&quot;data&quot;)&#10;&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val DataStr = MTaskInfo(item)&#10;&#10;                NewDataArray.add(DataStr)&#10;            }&#10;            getMTaskList().postValue(NewDataArray)&#10;&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (Список задач)&quot;)&#10;&#10;        }&#10;    }&#10;&#10;    fun parsePlaceInfo(JSonStr: String) {&#10;        try {&#10;&#10;            val data = JSONObject(JSonStr)&#10;            val items = data.getJSONArray(&quot;placeinfo&quot;)&#10;            val item: JSONObject = items.getJSONObject(0)&#10;            val DataStr = PlaceInfo(item)&#10;            getPaspPlace().postValue(DataStr)&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (поиск места хранения): ${e.toString()}&quot;)&#10;        }&#10;    }&#10;&#10;    fun parseUpdateMTask(ResultStr: String) {&#10;        if (ResultStr != &quot;&quot;)&#10;            loadMTaskList()&#10;    }&#10;&#10;    fun parsePaspList(ResultStr: String) {&#10;        val SearchResult: MutableList&lt;PaspInfo&gt; = mutableListOf()&#10;        try {&#10;            val data = JSONObject(ResultStr)&#10;            val items = data.getJSONArray(&quot;paspinfo&quot;)&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = PaspInfo(item)&#10;                SearchResult.add(frinfo)&#10;            }&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (поиск паспорта)&quot;)&#10;        }&#10;        getPaspList().postValue(SearchResult)&#10;    }&#10;&#10;    fun parseGrZapList(ResultStr: String, SearchStr: String) {&#10;        val SearchResult: MutableList&lt;SkladGrZapInfo&gt; = mutableListOf()&#10;        try {&#10;            val data = JSONObject(ResultStr)&#10;            val items = data.getJSONArray(&quot;grzapinfo&quot;)&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = SkladGrZapInfo(item, SearchStr)&#10;                SearchResult.add(frinfo)&#10;            }&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (поиск группы запуска)&quot;)&#10;        }&#10;        getGrZapList().postValue(SearchResult)&#10;    }&#10;&#10;&#10;&#10;    fun parseSkladOstatokList(ResultStr: String) {&#10;        val New_FragmentList : ArrayList&lt;SkladFragmentInfo&gt; = ArrayList&lt;SkladFragmentInfo&gt; ()&#10;        try {&#10;            New_FragmentList.clear()&#10;            val data = JSONObject(ResultStr)&#10;            val items=data.getJSONArray(&quot;data&quot;)&#10;&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = SkladFragmentInfo(item)&#10;                New_FragmentList.add(frinfo)&#10;            }&#10;        }&#10;        catch (e: JSONException) {&#10;            e.printStackTrace()&#10;        }&#10;        data_FragmentList.postValue(New_FragmentList)&#10;&#10;    }&#10;&#10;&#10;    fun parseSkladOstatokDetail(jsonText:String) {&#10;&#10;        val DataArray : ArrayList&lt;SkladFragmentHistoryInfo&gt; = ArrayList&lt;SkladFragmentHistoryInfo&gt; ()&#10;&#10;        try {&#10;&#10;            val data = JSONObject(jsonText)&#10;&#10;            val ItemInfo=data.getJSONArray(&quot;data&quot;)&#10;            val itemData: JSONObject = ItemInfo.getJSONObject(0)&#10;            val SklFrInfo=SkladFragmentInfo(itemData)&#10;&#10;            f_SelectedFragment.value =  SklFrInfo&#10;&#10;            val items=data.getJSONArray(&quot;detail&quot;)&#10;&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = SkladFragmentHistoryInfo(item)&#10;&#10;                if (frinfo.getParam(&quot;Key_Nacl_Str_Sost&quot;).ParamIsNull)&#10;                    frinfo.Name_K_Ed = SklFrInfo.getStrParam(&quot;Name_K_Ed&quot;)&#10;&#10;                DataArray.add(frinfo)&#10;            }&#10;            sklad_fragment_history.value = DataArray&#10;        }&#10;        catch (e: JSONException) {&#10;            e.printStackTrace()&#10;        }&#10;&#10;    }&#10;&#10;    private var LastProgress: Job = Job()&#10;&#10;    private fun runProgress() {&#10;        if (LastProgress.isActive) LastProgress.cancel()&#10;&#10;        LastProgress = GlobalScope.launch(Dispatchers.IO) {&#10;            try {&#10;                for (i in 0..100) {&#10;                    RunProgress.postValue(i)&#10;                    delay(200)&#10;                }&#10;            } catch (e: java.lang.Exception) {&#10;                RunProgress.postValue(-1)&#10;            }&#10;&#10;        }&#10;    }&#10;&#10;    private fun stopProgress() {&#10;        if (LastProgress.isActive) LastProgress.cancel()&#10;    }&#10;&#10;    private fun showError(Text: String) {&#10;        ErrorText.value = Text&#10;        ISKaskadAPP.sendLogMessage(LogTAG, &quot;ErrorText=$Text&quot;)&#10;&#10;    }&#10;&#10;&#10;    interface ParseResult {&#10;        fun parseResult(Result: String, QryID: Int)&#10;    }&#10;&#10;&#10;    private   fun runHTTPQry(&#10;        QryID: Int, URLStr: String, URLParams: String,&#10;        callback: ParseResult, PrevJob: Job&#10;    ): Job {&#10;&#10;        var Result = PrevJob&#10;        if (Result.isActive) Result.cancel()&#10;&#10;        runProgress()&#10;        ErrorText.value = &quot;&quot;&#10;&#10;&#10;        Result = GlobalScope.launch(Dispatchers.IO) {&#10;&#10;            val UrlStr = ISKaskadAPP.makeURLStr(URLStr, URLParams)&#10;&#10;            ISKaskadAPP.sendLogMessage(LogTAG, &quot;URL QRY START ID=$QryID URLStr=$UrlStr&quot;)&#10;&#10;            try {&#10;                val ResultStr = URL(UrlStr).readText()&#10;&#10;                ISKaskadAPP.sendLogMessage(LogTAG, &quot;URL QRY COMPLETE ID=$QryID&quot;)&#10;&#10;                if (isActive)&#10;                    launch(Dispatchers.Main) {&#10;                        stopProgress()&#10;                        callback.parseResult(ResultStr, QryID)&#10;                    }&#10;            } catch (e: Exception) {&#10;                ISKaskadAPP.sendLogMessage(LogTAG, &quot;URL QRY Error ID=$QryID URLStr=$UrlStr&quot;)&#10;                if (isActive)&#10;                    launch(Dispatchers.Main) {&#10;                        stopProgress()&#10;                        showError(e.toString())&#10;                    }&#10;            }&#10;        }&#10;        return Result&#10;    }&#10;&#10;&#10;    override fun onCleared() {&#10;&#10;        ISKaskadAPP.sendLogMessage(LogTAG, &quot;onCleared&quot;)&#10;&#10;        val mySaver = ISKaskadAPP.sharedPreferences.edit()&#10;        mySaver.putString(&quot;SearchStr&quot;, SearchStr)&#10;&#10;        mySaver.apply()&#10;&#10;        super.onCleared()&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package ru.iskaskad.iskaskadapp&#10;&#10;import android.app.AlertDialog&#10;import android.app.Application&#10;import android.app.Dialog&#10;import android.content.SharedPreferences&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.fragment.app.DialogFragment&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.preference.PreferenceManager&#10;import kotlinx.coroutines.*&#10;import org.json.JSONException&#10;import org.json.JSONObject&#10;import ru.iskaskad.iskaskadapp.dto.*&#10;import java.net.URL&#10;import java.util.*&#10;&#10;&#10;class IsKaskadAPPVM(application: Application) : AndroidViewModel(application) {&#10;&#10;    class MyDialogFragment : DialogFragment() {&#10;&#10;        override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {&#10;            return activity?.let {&#10;                val builder = AlertDialog.Builder(it)&#10;                builder.setTitle(&quot;Важное сообщение!&quot;)&#10;                    .setMessage(&quot;Покормите кота!&quot;)&#10;                    //.setIcon(R.drawable.hungrycat)&#10;                    .setPositiveButton(&quot;ОК, иду на кухню&quot;) {&#10;                            dialog, id -&gt;  dialog.cancel()&#10;                    }&#10;                builder.create()&#10;            } ?: throw IllegalStateException(&quot;Activity cannot be null&quot;)&#10;        }&#10;    }&#10;&#10;&#10;&#10;    val LogTAG = &quot;iskaskadappViewModel&quot;&#10;&#10;    init {&#10;        ISKaskadAPP.sendLogMessage(LogTAG, &quot;Init&quot;)&#10;    }&#10;&#10;    var RunProgress: MutableLiveData&lt;Int&gt; = MutableLiveData(-1)&#10;    var ErrorText: MutableLiveData&lt;String&gt; = MutableLiveData(&quot;&quot;)&#10;    var ErrorMessage:MutableLiveData&lt;String&gt; = MutableLiveData(&quot;&quot;)&#10;&#10;    var AdvSearchChecked: Boolean = false&#10;&#10;//    private val myPreferences = PreferenceManager.getDefaultSharedPreferences(getApplication())&#10;&#10;    var SearchStr: String = &quot;&quot;&#10;&#10;    var NeedStatistics: Boolean = false&#10;&#10;    private var data_PaspPlace: MutableLiveData&lt;PlaceInfo&gt; = MutableLiveData()&#10;    fun getPaspPlace() = data_PaspPlace&#10;&#10;    private var PaspPlaceJob: Job = Job()&#10;    private var PaspInfoJob: Job = Job()&#10;    private var MTaskJob: Job = Job()&#10;    private var UpdateMTaskJob: Job = Job()&#10;    private var PaspListJob: Job = Job()&#10;    private var SkladJob:Job= Job()&#10;    private var SkladTaskJob:Job=Job()&#10;    private var SkladGrZapJob:Job=Job()&#10;    private var SkladGrZapInfoJob:Job=Job()&#10;    private var SelectSubjJob:Job= Job()&#10;    private var SkladRunGrZapJob:Job= Job()&#10;&#10;&#10;    fun SkladRunGrZap(RunStr: String) {&#10;&#10;        SkladRunGrZapJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_RUN_GRZAP, RunStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    try {&#10;                        val V = getGrZapList().value&#10;                         V?.let { if (it.count() &gt; 0)&#10;                                      loadGrZapList(it[0].SearchStr)&#10;                                  else&#10;                                      loadGrZapList(&quot;&quot;)&#10;                                }&#10;&#10;&#10;                        val JsonData = JSONObject(Result)&#10;                        val Items = JsonData.getJSONArray(&quot;resultinfo&quot;)&#10;                        val frinfo = Items.getJSONObject(0)&#10;                        val ErrText = frinfo.getString(&quot;ErrorMessage&quot;)&#10;&#10;                        if (frinfo.getString(&quot;RESULT&quot;) == &quot;SUCCESS&quot;)&#10;                            Toast.makeText(getApplication(), ErrText, Toast.LENGTH_LONG).show()&#10;                        else {&#10;                            ErrorMessage.postValue(ErrText)&#10;&#10;                        }&#10;&#10;                    } catch (e: JSONException) {&#10;                        e.printStackTrace()&#10;                        showError(&quot;Ошибка данных при отправке запроса на создание накладных: $Result&quot;)&#10;                    }&#10;&#10;&#10;&#10;                }&#10;            }, SkladRunGrZapJob&#10;        )&#10;    }&#10;&#10;&#10;&#10;&#10;&#10;    fun clearGrZapInfo() {&#10;         getGrZapInfo().postValue(null)&#10;    }&#10;    fun loadGrZapInfo(SearchStr: String) {&#10;&#10;        getGrZapInfo().value?.let {&#10;            if (SearchStr== it.SearchStr) return&#10;        }&#10;&#10;        clearGrZapInfo()&#10;&#10;&#10;        SkladGrZapInfoJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_GRZAP_INFO, SearchStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseGrZapInfo(Result, SearchStr)&#10;&#10;                }&#10;            }, SkladGrZapJob&#10;        )&#10;    }&#10;    fun parseGrZapInfo(JSonStr: String, SearchStr:String) {&#10;        try {&#10;&#10;            val JsonData = JSONObject(JSonStr)&#10;            val Items = JsonData.getJSONArray(&quot;grzapinfo&quot;)&#10;            val frinfo = SkladGrZapDetailedInfo(Items.getJSONObject(0))&#10;            frinfo.SearchStr = SearchStr&#10;            getGrZapInfo().postValue(frinfo)&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (задание на запуск)&quot;)&#10;        }&#10;&#10;&#10;    }&#10;&#10;&#10;&#10;&#10;    private var data_GrZapInfo: MutableLiveData&lt;SkladGrZapDetailedInfo?&gt; = MutableLiveData()&#10;    fun getGrZapInfo() = data_GrZapInfo&#10;&#10;&#10;&#10;    fun moveItems(KeyNaclStrList:String, KeyNaclStrSostList:String, Key_Pasp_Place:String){&#10;&#10;        if ((KeyNaclStrList==&quot;&quot;) &amp;&amp; (KeyNaclStrSostList==&quot;&quot;))&#10;        {&#10;            Toast.makeText(getApplication(), &quot;Для перемещения необходимо выбрать перемещаемые позиции&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;&#10;        var request = &quot;&quot;&#10;&#10;&#10;        request += &quot;&amp;Key_Pasp_Place=&quot; + ISKaskadAPP.encodeStr(Key_Pasp_Place)&#10;&#10;        if (KeyNaclStrList != &quot;&quot;)&#10;            request += &quot;&amp;KeyNaclStrList=&quot; + ISKaskadAPP.encodeStr(KeyNaclStrList)&#10;&#10;        if (KeyNaclStrSostList != &quot;&quot;)&#10;            request += &quot;&amp;KeyNaclStrSostList=&quot; + ISKaskadAPP.encodeStr(KeyNaclStrSostList)&#10;&#10;&#10;        SkladTaskJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_FRAGMENT_MOVE, request,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseSkladTask(Result)&#10;                }&#10;            }, SkladTaskJob&#10;        )&#10;&#10;    }&#10;&#10;    fun parseSkladTask(StrResult: String) {&#10;        if (StrResult==ISKaskadAPP.URL_RESULT_SUCCESS)&#10;        {&#10;            Toast.makeText(getApplication(), &quot;Перемещение произошло успешно&quot;, Toast.LENGTH_LONG).show()&#10;            loadSkladOstatokList(LastSkladSearchStr)&#10;        }&#10;        else&#10;        {&#10;            Toast.makeText(getApplication(), &quot;Ошибка перемещения: $StrResult&quot;, Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;&#10;    fun updateMTask(New_Key_Pasp_Place: String, Key_Pasport: String, NewState: String) {&#10;        val URLParams =&#10;            &quot;&amp;New_Key_Pasp_Place=&quot; + New_Key_Pasp_Place + &quot;&amp;Key_Pasport=&quot; + Key_Pasport +&#10;                    &quot;&amp;NewState=&quot; + NewState&#10;&#10;        UpdateMTaskJob = runHTTPQry(0, ISKaskadAPP.URL_MTASK_SETSTATUS, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseUpdateMTask(Result)&#10;                }&#10;            }, UpdateMTaskJob&#10;        )&#10;    }&#10;&#10;    private var data_FragmentList:MutableLiveData&lt;MutableList&lt;SkladFragmentInfo&gt;&gt; = MutableLiveData()&#10;    fun getFragmentList() = data_FragmentList&#10;&#10;&#10;    private var  sklad_fragment_history: MutableLiveData&lt; ArrayList&lt;SkladFragmentHistoryInfo&gt;&gt; = MutableLiveData()&#10;    fun getSelectedFragmentHistory() = sklad_fragment_history&#10;&#10;    private var f_SelectedFragment: MutableLiveData&lt;SkladFragmentInfo?&gt; = MutableLiveData(null)&#10;    fun getSelectedFragment() = f_SelectedFragment&#10;&#10;    var SelectedFragment: SkladFragmentInfo?&#10;        get() = f_SelectedFragment.value&#10;        set(value) {&#10;            if (value != f_SelectedFragment.value) {&#10;                f_SelectedFragment.postValue(value)&#10;&#10;                value?.let {&#10;&#10;                    val  Key_Nacl_Str_Sost  = it.getParam(&quot;Key_Nacl_Str_Sost&quot;)&#10;                    val  Key_Nacl_Str       = it.getParam(&quot;Key_Nacl_Str&quot;)&#10;&#10;                    val URLParams = if ( Key_Nacl_Str_Sost.ParamIsNull)&#10;                        &quot;&amp;Key_Nacl_Str=&quot;+Key_Nacl_Str.IntVal.toString()&#10;                    else&#10;                        &quot;&amp;Key_Nacl_Str_Sost=&quot;+Key_Nacl_Str_Sost.IntVal.toString()&#10;&#10;                    loadSkladOstatokDetail(URLParams)&#10;                }&#10;&#10;            }&#10;        }&#10;&#10;&#10;&#10;    private var data_FindGrZap: MutableLiveData&lt;MutableList&lt;SkladGrZapInfo&gt;&gt; = MutableLiveData()&#10;    fun getGrZapList() = data_FindGrZap&#10;&#10;&#10;    private var data_SubjList: MutableLiveData&lt;MutableList&lt;SubjInfo&gt;&gt; = MutableLiveData()&#10;    fun getSubjList() = data_SubjList&#10;&#10;    private var data_SelectedSubjInfo: MutableLiveData&lt;SubjInfo?&gt; = MutableLiveData(null)&#10;    fun GetSelectedSubjInfo() = data_SelectedSubjInfo&#10;&#10;&#10;&#10;    private var data_FindPasp: MutableLiveData&lt;MutableList&lt;PaspInfo&gt;&gt; = MutableLiveData()&#10;    fun getPaspList() = data_FindPasp&#10;&#10;    private var data_PaspMK: MutableLiveData&lt;MutableList&lt;PaspMKInfo&gt;&gt; = MutableLiveData()&#10;    fun getPaspMK() = data_PaspMK&#10;&#10;    private var data_PaspHistory: MutableLiveData&lt;MutableList&lt;PaspHistoryRecInfo&gt;&gt; =  MutableLiveData()&#10;    fun getPaspHistory() = data_PaspHistory&#10;&#10;    private var f_SelectedPaspInfo: MutableLiveData&lt;PaspInfo?&gt; = MutableLiveData(null)&#10;    fun getSelectedPaspInfo() = f_SelectedPaspInfo&#10;&#10;&#10;    var SelectedPaspInfo: PaspInfo?&#10;        get() = f_SelectedPaspInfo.value&#10;        set(value) {&#10;            if (value != f_SelectedPaspInfo.value) {&#10;                f_SelectedPaspInfo.postValue(value)&#10;                data_PaspMK.value = ArrayList&lt;PaspMKInfo&gt;()&#10;                data_PaspHistory.value = ArrayList&lt;PaspHistoryRecInfo&gt;()&#10;                loadPaspInfo(value!!.getStrParam(&quot;Key_Pasport&quot;))&#10;            }&#10;        }&#10;&#10;&#10;&#10;    private var data_mtask: MutableLiveData&lt;MutableList&lt;MTaskInfo&gt;&gt; = MutableLiveData()&#10;    fun getMTaskList() = data_mtask&#10;&#10;    fun loadGrZapList(SearchStr: String) {&#10;        SkladGrZapJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_GRZAP_FIND, SearchStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseGrZapList(Result, SearchStr)&#10;                }&#10;            }, SkladGrZapJob&#10;        )&#10;    }&#10;&#10;&#10;     fun loadPaspList(SearchStr: String) {&#10;        PaspListJob = runHTTPQry(0, ISKaskadAPP.URL_PASPINFO_FINDPASP, SearchStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parsePaspList(Result)&#10;                }&#10;            }, PaspListJob&#10;        )&#10;    }&#10;&#10;&#10;&#10;    fun loadPaspPlaceInfo(Key_Pasp_Place: String) {&#10;        val URLParams = &quot;&amp;Key_Pasp_Place=$Key_Pasp_Place&quot;&#10;&#10;        PaspPlaceJob = runHTTPQry(0, ISKaskadAPP.URL_PASPPLACE_GETINFO, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parsePlaceInfo(Result)&#10;                }&#10;            }, PaspPlaceJob&#10;        )&#10;    }&#10;&#10;&#10;&#10;    fun loadPaspInfo(Key_Pasport: String) {&#10;        val URLParams = &quot;&amp;Key_Pasport=$Key_Pasport&quot;&#10;&#10;        PaspInfoJob = runHTTPQry(0, ISKaskadAPP.URL_PASPINFO_GETINFO, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parsePaspInfo(Result)&#10;                }&#10;            }, PaspInfoJob&#10;        )&#10;    }&#10;&#10;    fun loadMTaskList() {&#10;        MTaskJob = runHTTPQry(0, ISKaskadAPP.URL_MTASK_GETLIST, &quot;&quot;,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseMTaskList(Result)&#10;                }&#10;            }, MTaskJob&#10;        )&#10;&#10;    }&#10;&#10;    private var LastSkladSearchStr:String=&quot;&quot;&#10;&#10;    fun loadSkladOstatokList(SearchStr: String) {&#10;        LastSkladSearchStr=SearchStr&#10;        SelectSubjJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_FRAGMENT_FIND, SearchStr,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseSkladOstatokList(Result)&#10;                }&#10;            }, SkladJob&#10;        )&#10;    }&#10;&#10;    fun loadSkladOstatokDetail(URLParams: String) {&#10;&#10;        SkladJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_FRAGMENT_INFO, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    parseSkladOstatokDetail(Result)&#10;                }&#10;            }, SkladJob&#10;        )&#10;    }&#10;&#10;    fun inventOstatok(Key_Pasp_Place:String, Key_Nacl_Str:String, Kolvo:String, Key_Nacl_Str_Sost:String, KolvoZag:String){&#10;&#10;        var URLParams  = &quot;&amp;Key_Pasp_Place=$Key_Pasp_Place&amp;Key_Nacl_Str=$Key_Nacl_Str&quot;&#10;&#10;        URLParams = if ( Key_Nacl_Str_Sost != &quot;&quot;)  {&#10;            &quot;$URLParams&amp;Key_Nacl_Str_Sost=$Key_Nacl_Str_Sost&amp;KolvoZag=${ISKaskadAPP.encodeStr(KolvoZag.replace(&quot;,&quot;,&quot;.&quot;))}&quot;&#10;        }&#10;        else  {&#10;            &quot;$URLParams&amp;Kolvo=${ISKaskadAPP.encodeStr(Kolvo.replace(&quot;,&quot;,&quot;.&quot;))}&quot;&#10;        }&#10;&#10;        SkladJob = runHTTPQry(0, ISKaskadAPP.URL_SKLAD_FRAGMENT_INVENT, URLParams,&#10;            object : ParseResult {&#10;                override fun parseResult(Result: String, QryID: Int) {&#10;                    if (Result== ISKaskadAPP.URL_RESULT_SUCCESS) {&#10;                        Toast.makeText(getApplication(), &quot;Обновление данных прошло успешно&quot;, Toast.LENGTH_LONG).show()&#10;&#10;&#10;&#10;                        val URLParams1 =  if (Key_Nacl_Str_Sost==&quot;&quot;)&#10;                            &quot;&amp;Key_Nacl_Str=$Key_Nacl_Str&quot;&#10;                        else&#10;                            &quot;&amp;Key_Nacl_Str_Sost=$Key_Nacl_Str_Sost&quot;&#10;&#10;                        loadSkladOstatokDetail(URLParams1)&#10;&#10;&#10;                    }&#10;                    else&#10;                        Toast.makeText(getApplication(), &quot;Ошибка инвентаризации: $Result&quot;, Toast.LENGTH_LONG).show()&#10;                }&#10;            }, SkladJob&#10;        )&#10;&#10;    }&#10;&#10;&#10;    var LastSubjListSearchStr:String = &quot;&quot;&#10;&#10;    fun loadSubjList(SearchStr: String) {&#10;        if ((SearchStr!=LastSubjListSearchStr)  || (1==1))&#10;        {&#10;            LastSubjListSearchStr = SearchStr&#10;&#10;            SelectSubjJob = runHTTPQry(&#10;                0, ISKaskadAPP.URL_SUBJ_FIND, SearchStr,&#10;                object : ParseResult {&#10;                    override fun parseResult(Result: String, QryID: Int) {&#10;                        parseSubjList(Result)&#10;                    }&#10;                }, SelectSubjJob&#10;            )&#10;        }&#10;    }&#10;&#10;&#10;    fun parseSubjList(ResultStr: String) {&#10;        val SearchResult: MutableList&lt;SubjInfo&gt; = mutableListOf()&#10;        try {&#10;            val data = JSONObject(ResultStr)&#10;            val items = data.getJSONArray(&quot;subjinfo&quot;)&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = SubjInfo(item)&#10;                SearchResult.add(frinfo)&#10;            }&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (поиск группы запуска)&quot;)&#10;        }&#10;        getSubjList().postValue(SearchResult)&#10;        if (SearchResult.count()==1)&#10;            GetSelectedSubjInfo().postValue(SearchResult[0])&#10;    }&#10;&#10;&#10;&#10;&#10;    fun parsePaspInfo(JSonStr: String) {&#10;&#10;        try {&#10;&#10;            val data = JSONObject(JSonStr)&#10;&#10;            val ItemInfo = data.getJSONArray(&quot;paspinfo&quot;)&#10;            val itemData: JSONObject = ItemInfo.getJSONObject(0)&#10;&#10;            val NewPaspInfo = PaspInfo(itemData)&#10;&#10;            f_SelectedPaspInfo.value = NewPaspInfo&#10;&#10;            if (NewPaspInfo.getStrParam(&quot;Key_Pasport&quot;) == SelectedPaspInfo?.getStrParam(&quot;Key_Pasport&quot;))&#10;            if (true)&#10;            {&#10;&#10;                val NewDataArray: ArrayList&lt;PaspMKInfo&gt; = ArrayList&lt;PaspMKInfo&gt;()&#10;&#10;                val items = data.getJSONArray(&quot;paspmk&quot;)&#10;&#10;                for (i in 0 until items.length()) {&#10;                    val item: JSONObject = items.getJSONObject(i)&#10;                    val DataStr = PaspMKInfo(item)&#10;&#10;                    NewDataArray.add(DataStr)&#10;                }&#10;                getPaspMK().postValue(NewDataArray)&#10;            }&#10;&#10;            if (NewPaspInfo.getStrParam(&quot;Key_Pasport&quot;) == SelectedPaspInfo?.getStrParam(&quot;Key_Pasport&quot;))&#10;&#10;            if (true)&#10;            {&#10;&#10;                val NewDataArray: ArrayList&lt;PaspHistoryRecInfo&gt; = ArrayList&lt;PaspHistoryRecInfo&gt;()&#10;&#10;                val items = data.getJSONArray(&quot;history&quot;)&#10;&#10;                for (i in 0 until items.length()) {&#10;                    val item: JSONObject = items.getJSONObject(i)&#10;                    val DataStr = PaspHistoryRecInfo(item)&#10;&#10;                    NewDataArray.add(DataStr)&#10;                }&#10;                getPaspHistory().postValue(NewDataArray)&#10;            }&#10;&#10;&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (Детализация паспорта)&quot;)&#10;        }&#10;&#10;    }&#10;&#10;    fun parseMTaskList(JSonStr: String) {&#10;        try {&#10;&#10;            val data = JSONObject(JSonStr)&#10;&#10;            val NewDataArray: ArrayList&lt;MTaskInfo&gt; = ArrayList&lt;MTaskInfo&gt;()&#10;&#10;            val items = data.getJSONArray(&quot;data&quot;)&#10;&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val DataStr = MTaskInfo(item)&#10;&#10;                NewDataArray.add(DataStr)&#10;            }&#10;            getMTaskList().postValue(NewDataArray)&#10;&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (Список задач)&quot;)&#10;&#10;        }&#10;    }&#10;&#10;    fun parsePlaceInfo(JSonStr: String) {&#10;        try {&#10;&#10;            val data = JSONObject(JSonStr)&#10;            val items = data.getJSONArray(&quot;placeinfo&quot;)&#10;            val item: JSONObject = items.getJSONObject(0)&#10;            val DataStr = PlaceInfo(item)&#10;            getPaspPlace().postValue(DataStr)&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (поиск места хранения): ${e.toString()}&quot;)&#10;        }&#10;    }&#10;&#10;    fun parseUpdateMTask(ResultStr: String) {&#10;        if (ResultStr != &quot;&quot;)&#10;            loadMTaskList()&#10;    }&#10;&#10;    fun parsePaspList(ResultStr: String) {&#10;        val SearchResult: MutableList&lt;PaspInfo&gt; = mutableListOf()&#10;        try {&#10;            val data = JSONObject(ResultStr)&#10;            val items = data.getJSONArray(&quot;paspinfo&quot;)&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = PaspInfo(item)&#10;                SearchResult.add(frinfo)&#10;            }&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (поиск паспорта)&quot;)&#10;        }&#10;        getPaspList().postValue(SearchResult)&#10;    }&#10;&#10;    fun parseGrZapList(ResultStr: String, SearchStr: String) {&#10;        val SearchResult: MutableList&lt;SkladGrZapInfo&gt; = mutableListOf()&#10;        try {&#10;            val data = JSONObject(ResultStr)&#10;            val items = data.getJSONArray(&quot;grzapinfo&quot;)&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = SkladGrZapInfo(item, SearchStr)&#10;                SearchResult.add(frinfo)&#10;            }&#10;        } catch (e: JSONException) {&#10;            e.printStackTrace()&#10;            showError(&quot;Ошибка данных (поиск группы запуска)&quot;)&#10;        }&#10;        getGrZapList().postValue(SearchResult)&#10;    }&#10;&#10;&#10;&#10;    fun parseSkladOstatokList(ResultStr: String) {&#10;        val New_FragmentList : ArrayList&lt;SkladFragmentInfo&gt; = ArrayList&lt;SkladFragmentInfo&gt; ()&#10;        try {&#10;            New_FragmentList.clear()&#10;            val data = JSONObject(ResultStr)&#10;            val items=data.getJSONArray(&quot;data&quot;)&#10;&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = SkladFragmentInfo(item)&#10;                New_FragmentList.add(frinfo)&#10;            }&#10;        }&#10;        catch (e: JSONException) {&#10;            e.printStackTrace()&#10;        }&#10;        data_FragmentList.postValue(New_FragmentList)&#10;&#10;    }&#10;&#10;&#10;    fun parseSkladOstatokDetail(jsonText:String) {&#10;&#10;        val DataArray : ArrayList&lt;SkladFragmentHistoryInfo&gt; = ArrayList&lt;SkladFragmentHistoryInfo&gt; ()&#10;&#10;        try {&#10;&#10;            val data = JSONObject(jsonText)&#10;&#10;            val ItemInfo=data.getJSONArray(&quot;data&quot;)&#10;            val itemData: JSONObject = ItemInfo.getJSONObject(0)&#10;            val SklFrInfo=SkladFragmentInfo(itemData)&#10;&#10;            f_SelectedFragment.value =  SklFrInfo&#10;&#10;            val items=data.getJSONArray(&quot;detail&quot;)&#10;&#10;            for (i in 0 until items.length()) {&#10;                val item: JSONObject = items.getJSONObject(i)&#10;                val frinfo = SkladFragmentHistoryInfo(item)&#10;&#10;                if (frinfo.getParam(&quot;Key_Nacl_Str_Sost&quot;).ParamIsNull)&#10;                    frinfo.Name_K_Ed = SklFrInfo.getStrParam(&quot;Name_K_Ed&quot;)&#10;&#10;                DataArray.add(frinfo)&#10;            }&#10;            sklad_fragment_history.value = DataArray&#10;        }&#10;        catch (e: JSONException) {&#10;            e.printStackTrace()&#10;        }&#10;&#10;    }&#10;&#10;    private var LastProgress: Job = Job()&#10;&#10;    private fun runProgress() {&#10;        if (LastProgress.isActive) LastProgress.cancel()&#10;&#10;        LastProgress = GlobalScope.launch(Dispatchers.IO) {&#10;            try {&#10;                for (i in 0..100) {&#10;                    RunProgress.postValue(i)&#10;                    delay(200)&#10;                }&#10;            } catch (e: java.lang.Exception) {&#10;                RunProgress.postValue(-1)&#10;            }&#10;&#10;        }&#10;    }&#10;&#10;    private fun stopProgress() {&#10;        if (LastProgress.isActive) LastProgress.cancel()&#10;    }&#10;&#10;    private fun showError(Text: String) {&#10;        ErrorText.value = Text&#10;        ISKaskadAPP.sendLogMessage(LogTAG, &quot;ErrorText=$Text&quot;)&#10;&#10;    }&#10;&#10;&#10;    interface ParseResult {&#10;        fun parseResult(Result: String, QryID: Int)&#10;    }&#10;&#10;&#10;    private   fun runHTTPQry(&#10;        QryID: Int, URLStr: String, URLParams: String,&#10;        callback: ParseResult, PrevJob: Job&#10;    ): Job {&#10;&#10;        var Result = PrevJob&#10;        if (Result.isActive) Result.cancel()&#10;&#10;        runProgress()&#10;        ErrorText.value = &quot;&quot;&#10;&#10;&#10;        Result = GlobalScope.launch(Dispatchers.IO) {&#10;&#10;            val UrlStr = ISKaskadAPP.makeURLStr(URLStr, URLParams)&#10;&#10;            ISKaskadAPP.sendLogMessage(LogTAG, &quot;URL QRY START ID=$QryID URLStr=$UrlStr&quot;)&#10;&#10;            try {&#10;                val ResultStr = URL(UrlStr).readText()&#10;&#10;                ISKaskadAPP.sendLogMessage(LogTAG, &quot;URL QRY COMPLETE ID=$QryID&quot;)&#10;&#10;                if (isActive)&#10;                    launch(Dispatchers.Main) {&#10;                        stopProgress()&#10;                        callback.parseResult(ResultStr, QryID)&#10;                    }&#10;            } catch (e: Exception) {&#10;                ISKaskadAPP.sendLogMessage(LogTAG, &quot;URL QRY Error ID=$QryID URLStr=$UrlStr&quot;)&#10;                if (isActive)&#10;                    launch(Dispatchers.Main) {&#10;                        stopProgress()&#10;                        showError(e.toString())&#10;                    }&#10;            }&#10;        }&#10;        return Result&#10;    }&#10;&#10;&#10;    override fun onCleared() {&#10;&#10;        ISKaskadAPP.sendLogMessage(LogTAG, &quot;onCleared&quot;)&#10;&#10;        val mySaver = ISKaskadAPP.sharedPreferences.edit()&#10;        mySaver.putString(&quot;SearchStr&quot;, SearchStr)&#10;&#10;        mySaver.apply()&#10;&#10;        super.onCleared()&#10;    }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>